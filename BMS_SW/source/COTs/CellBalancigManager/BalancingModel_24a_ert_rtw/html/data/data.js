var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"BalancingModel_24a","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"C:\\Users\\dell\\Desktop\\GP-BMS\\BMS_SW\\source\\COTs\\CellBalancigManager\\BalancingModel_24a_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'BalancingModel_24a'.\r\n *\r\n * Model version                  : 1.1\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue Jul  1 17:19:48 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: NXP->Cortex-M0/M0+\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"BalancingModel_24a.h\"        /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    rtmSetErrorStatus(rtM, \"Overrun\");\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  BalancingModel_24a_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  BalancingModel_24a_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 0.001 seconds (base rate of the model) here.\r\n   * The call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (rtmGetErrorStatus(rtM) == (NULL)) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"BalancingModel_24a.c","type":"source","group":"model","path":"C:\\Users\\dell\\Desktop\\GP-BMS\\BMS_SW\\source\\COTs\\CellBalancigManager\\BalancingModel_24a_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: BalancingModel_24a.c\r\n *\r\n * Code generated for Simulink model 'BalancingModel_24a'.\r\n *\r\n * Model version                  : 1.1\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue Jul  1 17:19:48 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: NXP->Cortex-M0/M0+\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"BalancingModel_24a.h\"\r\n#include \"rtwtypes.h\"\r\n#include <string.h>\r\n#include <math.h>\r\n\r\n/* Named constants for Chart: '<S1>/Chart1' */\r\n#define IN_Data_Check                  ((uint8_T)1U)\r\n#define IN_Discharge_Time_interval     ((uint8_T)2U)\r\n#define IN_Error_Check                 ((uint8_T)3U)\r\n#define IN_Get_balance_reference       ((uint8_T)4U)\r\n#define IN_Index_number                ((uint8_T)5U)\r\n#define IN_initialization              ((uint8_T)6U)\r\n\r\n/* Block signals and states (default storage) */\r\nDW rtDW;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL rtM_;\r\nRT_MODEL *const rtM = &rtM_;\r\n\r\n/* Model step function */\r\nvoid BalancingModel_24a_step(void)\r\n{\r\n  real_T Cell_Voltage[14];\r\n  real_T tmp;\r\n  int32_T i;\r\n  int32_T tmp_0;\r\n\r\n  /* SignalConversion generated from: '<S2>/ SFunction ' incorporates:\r\n   *  Chart: '<S1>/Chart1'\r\n   */\r\n  Cell_Voltage[0] = 0.0;\r\n  Cell_Voltage[1] = 0.0;\r\n  Cell_Voltage[2] = 0.0;\r\n  Cell_Voltage[3] = 0.0;\r\n  Cell_Voltage[4] = 0.0;\r\n  Cell_Voltage[5] = 0.0;\r\n  Cell_Voltage[6] = 0.0;\r\n  Cell_Voltage[7] = 0.0;\r\n  Cell_Voltage[8] = 0.0;\r\n  Cell_Voltage[9] = 0.0;\r\n  Cell_Voltage[10] = 0.0;\r\n  Cell_Voltage[11] = 0.0;\r\n  Cell_Voltage[12] = 0.0;\r\n  Cell_Voltage[13] = 0.0;\r\n\r\n  /* Chart: '<S1>/Chart1' incorporates:\r\n   *  SignalConversion generated from: '<S2>/ SFunction '\r\n   */\r\n  if (rtDW.temporalCounter_i1 < 32767U) {\r\n    rtDW.temporalCounter_i1++;\r\n  }\r\n\r\n  if (rtDW.is_active_c7_BalancingModel_24a == 0U) {\r\n    rtDW.is_active_c7_BalancingModel_24a = 1U;\r\n    rtDW.is_c7_BalancingModel_24a = IN_initialization;\r\n    memset(&rtDW.Ganna[0], 0, 14U * sizeof(real_T));\r\n    rtDW.i = 1.0;\r\n    rtDW.G = 1.0;\r\n    rtDW.H = 1.0;\r\n  } else {\r\n    switch (rtDW.is_c7_BalancingModel_24a) {\r\n     case IN_Data_Check:\r\n      if (rtDW.i == 14.0) {\r\n        rtDW.i = 1.0;\r\n        rtDW.is_c7_BalancingModel_24a = IN_Index_number;\r\n        rtDW.idx = 1.0;\r\n      } else {\r\n        rtDW.i = 1.0;\r\n        for (i = 0; i < 14; i++) {\r\n          rtDW.i = (real_T)i + 1.0;\r\n          tmp_0 = (int32_T)rtDW.i - 1;\r\n\r\n          /* SignalConversion generated from: '<S2>/ SFunction ' */\r\n          tmp = Cell_Voltage[tmp_0];\r\n          if (tmp > rtDW.cell_reference) {\r\n            if (tmp > 1.6) {\r\n              rtDW.Ganna[tmp_0] = (tmp - rtDW.cell_reference > 0.25);\r\n            } else {\r\n              rtDW.Ganna[tmp_0] = 0.0;\r\n            }\r\n          } else {\r\n            rtDW.Ganna[tmp_0] = 0.0;\r\n          }\r\n        }\r\n      }\r\n      break;\r\n\r\n     case IN_Discharge_Time_interval:\r\n      if ((rtDW.temporalCounter_i1 >= 30000U) && (rtDW.H == 14.0)) {\r\n        rtDW.H = 1.0;\r\n        rtDW.is_c7_BalancingModel_24a = IN_Get_balance_reference;\r\n        rtDW.i = 1.0;\r\n        rtDW.cell_reference = 10.0;\r\n      } else {\r\n        rtDW.H = 1.0;\r\n        for (i = 0; i < 14; i++) {\r\n          rtDW.H = (real_T)i + 1.0;\r\n        }\r\n      }\r\n      break;\r\n\r\n     case IN_Error_Check:\r\n      if ((rtDW.G == 14.0) && (rtDW.abdullah == 0.0)) {\r\n        rtDW.G = 1.0;\r\n        rtDW.is_c7_BalancingModel_24a = IN_Data_Check;\r\n        rtDW.i = 1.0;\r\n        for (i = 0; i < 14; i++) {\r\n          rtDW.i = (real_T)i + 1.0;\r\n          tmp_0 = (int32_T)rtDW.i - 1;\r\n\r\n          /* SignalConversion generated from: '<S2>/ SFunction ' */\r\n          tmp = Cell_Voltage[tmp_0];\r\n          if (tmp > rtDW.cell_reference) {\r\n            if (tmp > 1.6) {\r\n              rtDW.Ganna[tmp_0] = (tmp - rtDW.cell_reference > 0.25);\r\n            } else {\r\n              rtDW.Ganna[tmp_0] = 0.0;\r\n            }\r\n          } else {\r\n            rtDW.Ganna[tmp_0] = 0.0;\r\n          }\r\n        }\r\n      } else if (rtDW.abdullah == 1.0) {\r\n        rtDW.G = 1.0;\r\n        rtDW.is_c7_BalancingModel_24a = IN_Get_balance_reference;\r\n        rtDW.i = 1.0;\r\n        rtDW.cell_reference = 10.0;\r\n      } else {\r\n        rtDW.G = 1.0;\r\n        for (i = 0; i < 14; i++) {\r\n          rtDW.G = (real_T)i + 1.0;\r\n          if (fabs(Cell_Voltage[(int32_T)rtDW.G - 1] -\r\n                   rtDW.cell_reference) > 0.5) {\r\n            rtDW.abdullah = 1.0;\r\n          }\r\n        }\r\n      }\r\n      break;\r\n\r\n     case IN_Get_balance_reference:\r\n      if (rtDW.i == 14.0) {\r\n        rtDW.i = 1.0;\r\n        rtDW.is_c7_BalancingModel_24a = IN_Error_Check;\r\n        rtDW.abdullah = 0.0;\r\n      } else {\r\n        rtDW.i = 1.0;\r\n        for (i = 0; i < 14; i++) {\r\n          rtDW.i = (real_T)i + 1.0;\r\n\r\n          /* SignalConversion generated from: '<S2>/ SFunction ' */\r\n          tmp = Cell_Voltage[(int32_T)rtDW.i - 1];\r\n          if ((tmp < rtDW.cell_reference) && (tmp > 1.5)) {\r\n            rtDW.cell_reference = tmp;\r\n          }\r\n        }\r\n      }\r\n      break;\r\n\r\n     case IN_Index_number:\r\n      if (rtDW.G == 14.0) {\r\n        rtDW.G = 1.0;\r\n        rtDW.temporalCounter_i1 = 0U;\r\n        rtDW.is_c7_BalancingModel_24a = IN_Discharge_Time_interval;\r\n        rtDW.H = 1.0;\r\n      } else {\r\n        rtDW.G = 1.0;\r\n        for (i = 0; i < 14; i++) {\r\n          rtDW.G = (real_T)i + 1.0;\r\n          if (rtDW.Ganna[(int32_T)rtDW.G - 1] == 1.0) {\r\n            rtDW.idx++;\r\n          }\r\n        }\r\n      }\r\n      break;\r\n\r\n     default:\r\n      /* case IN_initialization: */\r\n      rtDW.is_c7_BalancingModel_24a = IN_Get_balance_reference;\r\n      rtDW.i = 1.0;\r\n      rtDW.cell_reference = 10.0;\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\n/* Model initialize function */\r\nvoid BalancingModel_24a_initialize(void)\r\n{\r\n  /* (no initialization code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"BalancingModel_24a.h","type":"header","group":"model","path":"C:\\Users\\dell\\Desktop\\GP-BMS\\BMS_SW\\source\\COTs\\CellBalancigManager\\BalancingModel_24a_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: BalancingModel_24a.h\r\n *\r\n * Code generated for Simulink model 'BalancingModel_24a'.\r\n *\r\n * Model version                  : 1.1\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue Jul  1 17:19:48 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: NXP->Cortex-M0/M0+\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef BalancingModel_24a_h_\r\n#define BalancingModel_24a_h_\r\n#ifndef BalancingModel_24a_COMMON_INCLUDES_\r\n#define BalancingModel_24a_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* BalancingModel_24a_COMMON_INCLUDES_ */\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM RT_MODEL;\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real_T Ganna[14];                    /* '<S1>/Chart1' */\r\n  real_T i;                            /* '<S1>/Chart1' */\r\n  real_T G;                            /* '<S1>/Chart1' */\r\n  real_T H;                            /* '<S1>/Chart1' */\r\n  real_T cell_reference;               /* '<S1>/Chart1' */\r\n  real_T idx;                          /* '<S1>/Chart1' */\r\n  real_T abdullah;                     /* '<S1>/Chart1' */\r\n  uint16_T temporalCounter_i1;         /* '<S1>/Chart1' */\r\n  uint8_T is_active_c7_BalancingModel_24a;/* '<S1>/Chart1' */\r\n  uint8_T is_c7_BalancingModel_24a;    /* '<S1>/Chart1' */\r\n} DW;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM {\r\n  const char_T * volatile errorStatus;\r\n};\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW rtDW;\r\n\r\n/* Model entry point functions */\r\nextern void BalancingModel_24a_initialize(void);\r\nextern void BalancingModel_24a_step(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL *const rtM;\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'BalancingModel_24a'\r\n * '<S1>'   : 'BalancingModel_24a/Cell Balancing Model '\r\n * '<S2>'   : 'BalancingModel_24a/Cell Balancing Model /Chart1'\r\n */\r\n#endif                                 /* BalancingModel_24a_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\dell\\Desktop\\GP-BMS\\BMS_SW\\source\\COTs\\CellBalancigManager\\BalancingModel_24a_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'BalancingModel_24a'.\r\n *\r\n * Model version                  : 1.1\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue Jul  1 17:19:48 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: NXP->Cortex-M0/M0+\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: NXP->Cortex-M0/M0+\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32    long long:  64\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true,"showProtectedV2Report":true}};